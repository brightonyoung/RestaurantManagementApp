! function(c) {
    var a = function(e, d) {
        this.element = c(e);
        this.format = b.parseFormat(d.format || this.element.data("date-format") || "mm/dd/yyyy");
        this.isStatic = d.isStatic;
        this.picker = c(b.template).appendTo(this.isStatic ? this.element : "body").on({
            click: c.proxy(this.click, this),
            mousedown: c.proxy(this.mousedown, this)
        });
        this.isInput = this.element.is("input");
        this.component = this.element.is(".date") ? this.element.find(".add-on") : false;
        this.daysOnly = d.daysOnly;
        this.disablePastDates = d.disablePastDates;
        if (d.furthestDate) {
            this.furthestDate = b.parseDate(d.furthestDate, this.format)
        }
        if (this.isInput) {
            this.element.on({
                focus: c.proxy(this.show, this),
                blur: c.proxy(this.hide, this),
                keyup: c.proxy(this.update, this)
            })
        } else {
            if (!this.isStatic) {
                if (this.component) {
                    this.component.on("click", c.proxy(this.show, this))
                } else {
                    this.element.on("click", c.proxy(this.show, this))
                }
            }
        }
        this.disableToday = false;
        this.viewMode = 0;
        this.weekStart = d.weekStart || this.element.data("date-weekstart") || 0;
        this.weekEnd = this.weekStart == 0 ? 6 : this.weekStart - 1;
        this.fillDow();
        this.fillMonths();
        this.update();
        this.showMode();
        if (this.isStatic) {
            this.show()
        }
    };
    a.prototype = {
        constructor: a,
        currentDate: function() {
            return this.date
        },
        show: function(d) {
            this.picker.show();
            this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
            if (!this.isStatic) {
                this.place();
                c(window).on("resize", c.proxy(this.place, this));
                if (d) {
                    d.stopPropagation();
                    d.preventDefault()
                }
                if (!this.isInput) {
                    c(document).on("mousedown", c.proxy(this.hide, this))
                }
            }
            this.element.trigger({
                type: "show",
                date: this.date
            })
        },
        hide: function() {
            this.picker.hide();
            c(window).off("resize", this.place);
            this.viewMode = 0;
            this.showMode();
            if (!this.isInput) {
                c(document).off("mousedown", this.hide)
            }
            this.setValue();
            this.element.trigger({
                type: "hide",
                date: this.date
            })
        },
        setValue: function() {
            var d = b.formatDate(this.date, this.format);
            if (!this.isInput) {
                if (this.component) {
                    this.element.find("input").prop("value", d)
                }
                this.element.data("date", d)
            } else {
                this.element.prop("value", d)
            }
        },
        clearSelection: function() {
            this.date = new Date(0);
            this.fill()
        },
        place: function() {
            if (!this.isStatic) {
                var d = this.component ? this.component.offset() : this.element.offset();
                this.picker.css({
                    top: d.top + this.height,
                    left: d.left
                })
            }
        },
        update: function() {
            this.date = b.parseDate(this.isInput ? this.element.prop("value") : this.element.data("date"), this.format);
            this.viewDate = new Date(this.date);
            this.fill()
        },
        fillDow: function() {
            var d = this.weekStart;
            var e = "<tr>";
            while (d < this.weekStart + 7) {
                e += '<th class="dow">' + b.dates.daysMin[(d++) % 7] + "</th>"
            }
            e += "</tr>";
            this.picker.find(".datepicker-days thead").append(e)
        },
        fillMonths: function() {
            var e = "";
            var d = 0;
            while (d < 12) {
                e += '<span class="month">' + b.dates.monthsShort[d++] + "</span>"
            }
            this.picker.find(".datepicker-months td").append(e)
        },
        fill: function() {
            var p = new Date(this.viewDate),
                q = p.getFullYear(),
                o = p.getMonth(),
                f = this.date.valueOf(),
                s;
            var t = new Date();
            t.setHours(0);
            t.setMinutes(0);
            t.setSeconds(0);
            t.setMilliseconds(0);
            if (this.furthestDate) {
                s = this.furthestDate.valueOf()
            }
            if (this.disablePastDates) {
                var j = this.picker.find(".datepicker-days th.prev");
                if (p.getMonth() == t.getMonth() && p.getFullYear() == t.getFullYear()) {
                    j.addClass("inactive")
                } else {
                    j.removeClass("inactive")
                }
            }
            this.picker.find(".datepicker-days th:eq(1)").text(b.dates.months[o] + " " + q);
            var k = new Date(q, o - 1, 28, 0, 0, 0, 0),
                r = b.getDaysInMonth(k.getFullYear(), k.getMonth());
            k.setDate(r);
            k.setDate(r - (k.getDay() - this.weekStart + 7) % 7);
            var m = new Date(k);
            m.setDate(m.getDate() + 42);
            m = m.valueOf();
            html = [];
            var h;
            while (k.valueOf() < m) {
                if (k.getDay() == this.weekStart) {
                    html.push("<tr>")
                }
                h = "";
                if ((this.disablePastDates && k.valueOf() < t.valueOf()) || (this.disableToday && k.valueOf() == t.valueOf())) {
                    h += " old inactive"
                } else {
                    if (s && k.valueOf() > s) {
                        h += " new inactive"
                    } else {
                        if (k.getFullYear() < q || (k.getFullYear() === q && k.getMonth() < o)) {
                            h += " old"
                        } else {
                            if (k.getFullYear() > q || (k.getFullYear() === q && k.getMonth() > o)) {
                                h += " new"
                            }
                        }
                    }
                }
                if (k.valueOf() == this.date.valueOf()) {
                    h += " active"
                }
                html.push('<td class="day' + h + '">' + k.getDate() + "</td>");
                if (k.getDay() == this.weekEnd) {
                    html.push("</tr>")
                }
                k.setDate(k.getDate() + 1)
            }
            this.picker.find(".datepicker-days tbody").empty().append(html.join(""));
            var n = this.date.getFullYear();
            var e = this.picker.find(".datepicker-months").find("th:eq(1)").text(q).end().find("span").removeClass("active");
            if (n == q) {
                e.eq(this.date.getMonth()).addClass("active")
            }
            html = "";
            q = parseInt(q / 10, 10) * 10;
            var g = this.picker.find(".datepicker-years").find("th:eq(1)").text(q + "-" + (q + 9)).end().find("td");
            q -= 1;
            for (var l = -1; l < 11; l++) {
                html += '<span class="year' + (l == -1 || l == 10 ? " old" : "") + (n == q ? " active" : "") + '">' + q + "</span>";
                q += 1
            }
            g.html(html)
        },
        click: function(i) {
            i.stopPropagation();
            i.preventDefault();
            var h = c(i.target).closest("span, td, th");
            if (h.length == 1) {
                switch (h[0].nodeName.toLowerCase()) {
                    case "th":
                        switch (h[0].className) {
                            case "switch":
                                if (!this.daysOnly) {
                                    this.showMode(1)
                                }
                                break;
                            case "prev":
                            case "next":
                                this.viewDate["set" + b.modes[this.viewMode].navFnc].call(this.viewDate, this.viewDate["get" + b.modes[this.viewMode].navFnc].call(this.viewDate) + b.modes[this.viewMode].navStep * (h[0].className == "prev" ? -1 : 1));
                                this.fill();
                                break
                        }
                        break;
                    case "span":
                        if (h.is(".month")) {
                            var g = h.parent().find("span").index(h);
                            this.viewDate.setMonth(g)
                        } else {
                            var f = parseInt(h.text(), 10) || 0;
                            this.viewDate.setFullYear(f)
                        }
                        this.showMode(-1);
                        this.fill();
                        break;
                    case "td":
                        if (h.is(".day") && !h.is(".inactive")) {
                            var d = parseInt(h.text(), 10) || 1;
                            var g = this.viewDate.getMonth();
                            if (h.is(".old")) {
                                g -= 1
                            } else {
                                if (h.is(".new")) {
                                    g += 1
                                }
                            }
                            var f = this.viewDate.getFullYear();
                            this.date = new Date(f, g, d, 0, 0, 0, 0);
                            this.viewDate = new Date(f, g, d, 0, 0, 0, 0);
                            this.fill();
                            this.setValue();
                            this.element.trigger({
                                type: "changeDate",
                                date: this.date
                            })
                        }
                        break
                }
            }
        },
        mousedown: function(d) {
            d.stopPropagation();
            d.preventDefault()
        },
        showMode: function(d) {
            if (d) {
                this.viewMode = Math.max(0, Math.min(2, this.viewMode + d))
            }
            this.picker.find(">div").hide().filter(".datepicker-" + b.modes[this.viewMode].clsName).show()
        }
    };
    c.fn.datepicker = function(d) {
        return this.each(function() {
            var g = c(this),
                f = g.data("datepicker"),
                e = typeof d == "object" && d;
            if (!f) {
                g.data("datepicker", (f = new a(this, c.extend({}, c.fn.datepicker.defaults, e))))
            }
            if (typeof d == "string") {
                f[d]()
            }
        })
    };
    c.fn.datepicker.defaults = {};
    c.fn.datepicker.Constructor = a;
    var b = window.DPGlobal = {
        modes: [{
            clsName: "days",
            navFnc: "Month",
            navStep: 1
        }, {
            clsName: "months",
            navFnc: "FullYear",
            navStep: 1
        }, {
            clsName: "years",
            navFnc: "FullYear",
            navStep: 10
        }],
        dates: {
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
            daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        },
        isLeapYear: function(d) {
            return (((d % 4 === 0) && (d % 100 !== 0)) || (d % 400 === 0))
        },
        getDaysInMonth: function(d, e) {
            return [31, (b.isLeapYear(d) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][e]
        },
        parseFormat: function(f) {
            var e = f.match(/[.\/-].*?/),
                d = f.split(/\W+/);
            if (!e || !d || d.length == 0) {
                throw new Error("Invalid date format.")
            }
            return {
                separator: e,
                parts: d
            }
        },
        parseDate: function(d, k) {
            var j = d.split(k.separator),
                d = new Date(),
                l;
            d.setHours(0);
            d.setMinutes(0);
            d.setSeconds(0);
            d.setMilliseconds(0);
            if (j.length == k.parts.length) {
                for (var f = 0, e = k.parts.length; f < e; f++) {
                    l = parseInt(j[f], 10) || 1;
                    switch (k.parts[f]) {
                        case "dd":
                        case "d":
                            d.setDate(l);
                            break;
                        case "mm":
                        case "m":
                            var h = d.getDate();
                            d.setMonth(l - 1);
                            if (d.getDate() != h) {
                                var g = d.getMonth();
                                while (d.getMonth() == g) {
                                    d.setDate(d.getDate() - 1)
                                }
                            }
                            break;
                        case "yy":
                            d.setFullYear(2000 + l);
                            break;
                        case "yyyy":
                            d.setFullYear(l);
                            break
                    }
                }
            }
            return d
        },
        formatDate: function(d, g) {
            if (!d) {
                return ""
            }
            var h = {
                d: d.getDate(),
                m: d.getMonth() + 1,
                yy: d.getFullYear().toString().substring(2),
                yyyy: d.getFullYear()
            };
            h.dd = (h.d < 10 ? "0" : "") + h.d;
            h.mm = (h.m < 10 ? "0" : "") + h.m;
            h.mmmm = b.dates.months[d.getMonth()];
            var d = [];
            for (var f = 0, e = g.parts.length; f < e; f++) {
                d.push(h[g.parts[f]])
            }
            return d.join(g.separator)
        },
        headTemplate: '<thead><tr><th class="prev"><i class="icon-arrow-left"/></th><th colspan="5" class="switch"></th><th class="next"><i class="icon-arrow-right"/></th></tr></thead>',
        contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>'
    };
    b.template = '<div class="datepicker dropdown-menu"><div class="datepicker-days"><table class=" table-condensed">' + b.headTemplate + '<tbody></tbody></table></div><div class="datepicker-months"><table class="table-condensed">' + b.headTemplate + b.contTemplate + '</table></div><div class="datepicker-years"><table class="table-condensed">' + b.headTemplate + b.contTemplate + "</table></div></div>"
}(window.jQuery);